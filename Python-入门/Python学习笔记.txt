Python 学习笔记
2016年8月14日 周日 
第一章:课程介绍
  1-1课程介绍 
     开源软件 openstack lunix
第二章:安装Python
  2-1选择Python版本
     跨操作系统的语言 现在有2.7版和3.3版二者语法不同 安装2.7版的Python为了满足相关的第三方代码库的支持
  2-2在Windows上安装
    Python官往网址:www.python.org  需要修改环境变量Path 在计算机-〉系统属性-〉高级系统属性—〉环境变量-〉Path-〉编辑
	中增加“;C:\Python”。 用命令提示符打开输入“python” 进入python的编辑界面，输入“exit()” 退出pythono的编辑界面。 
  2-3第一个Python程序
    使用Notepad++编辑，文件格式为UTF-8（无BOM）格式，这与Html文件编辑不一样，在HTML文件中我们使用的格式为UTF-8.
	保存为.py文件。运行时需要通过命令提示符进入到当前要执行的Python文件所在的文件夹使用指令“dir”可以查看当前文件夹中
	的文件，然后使用命令“python 但前要执行的文件名.py” 就可以了，最后执行命令“exit()”退出。
第三章：Python变量和数据类型
  3-1数据类型
    整数：可以采用和数学上相同的方法表示整数，如100，1，-3214等也可以使用十六进制的方式表示整数，但是要加上0x的前缀，
        如：0xff34
    浮点数（小数）：一是采用数学方式表示；二是采用科学计数法来表示，此时我们用e来代替10。如：1.23*10^9就表示为1.23e9
        又如：0.000023 可以表示为2.3e-5
        注意：整数的运算不论加减乘除结果都是精确的，但是浮点数的运算就有着四舍五入的误差。
    字符串：以双引号或单引号表示，其中单引号和双引号都不是字符串的内容。如：“abc” 表示三个字符a,b,c。
    布尔值：使用“True”和“False”来表示，注意大小写。也可以通过布尔运算（与“and”、或“or”、非“not”）来计算。	
	空值：Python特有，不同于0 ,因为0是有意义的，而空值（None）是没有意义的。
  3-2Print语法
    打印 可以直接打印数字、算式的结果、使用“”或‘’还可以打印字符串，使用“，”分隔后还可以同时打印多个字符串，但是此时的
	“，”被视为“空格”来打印。
  3-3注释
    使用# 注释一整行
  3-4什么是变量
    变量是用一个变量名表示，变量名必须是大小写英文、数字和下划线（_）的组合，且不能以数字开头。
	“=”被用来赋值，同一个变量可以被重复赋值，且每次赋值的数据类型可以不一样。
	动态语言：变量本身类型不固定的语言，如：Python。
	静态语言：在定义时变量的类型就已经被指定。如：Java。
  3-5定义字符串
    如果字符串只有“''”，则用“""”来表示字符串；如果字符串只有“""”，则用“''”来表示字符串；如果字符串同时含有“""”和“''”，
	则用转义字符“\” 。
	其它的常用转义字符：\n表示换行  \t表示制表符  \\表示“\”本身
  3-6raw字符串与多行字符串
    如果一个字符串包含很多需要转义的字符，对每一个字符都进行转义会很麻烦。为了避免这种情况，我们可以在字符串前面加个前
	缀 r ，表示这是一个 raw 字符串，里面的字符就不需要转义了。例如：r'\(~_~)/ \(~_~)/'
	但是r'...'表示法不能表示多行字符串，也不能表示包含'和 "的字符串。
	如果要表示多行字符串，可以用'''...'''表示：

	'''Line 1
	Line 2
	Line 3'''
	上面这个字符串的表示方法和下面的是完全一样的：

	'Line 1\nLine 2\nLine 3'
	还可以在多行字符串前面添加 r ，把这个多行字符串也变成一个raw字符串：

	r'''Python is created by "Guido".
	It is free and easy to learn.
	Let's start learn Python in imooc!'''  
  3-7Unicode字符串
    为了防止由于编码规范的不同而提出的一种对字符串编码的编码方案。在Pyton中由于其比Unicode出现早，对于一般的内容我们仍
	采用ASCLL码，其它使用Unicode编码时采用语法“u'...'” ，如：
	
	print u'中文'
	中文
	
	如果中文字符串在Python环境下遇到 UnicodeDecodeError，这是因为.py文件保存的格式有问题。可以在第一行添加注释
	# -*- coding: utf-8 -*-（不能和u同时使用） 目的是告诉Python解释器，用UTF-8编码读取源代码。然后用Notepad++ 另存为... 并选择UTF-8格式保
	存。
  3-8整数和浮点数
    1）Python支持对整数和浮点数直接进行四则混合运算，运算规则和数学上的四则运算规则完全一致。
	2）使用括号可以提升优先级，这和数学运算完全一致，注意只能使用小括号，但是括号可以嵌套很多层。
	3）和数学运算不同的地方是，Python的整数运算结果仍然是整数，浮点数运算结果仍然是浮点数。
	   是整数和浮点数混合运算的结果就变成浮点数了。
	4）为什么要区分整数运算和浮点数运算呢？这是因为整数运算的结果永远是精确的，而浮点数运算的结果不一定精确，因为计算机内存再大，也无法精确表
	   示出无限循环小数，比如 0.1 换成二进制表示就是无限循环小数。
	5）Python的整数除法，即使除不尽，结果仍然是整数，余数直接被扔掉。不过，Python提供了一个求余的运算 % 可以计算余数。
	6）如果我们要计算 11 / 4 的精确结果，按照“整数和浮点数混合运算的结果是浮点数”的法则，把两个数中的一个变成浮点数再运算就没问题了。
  3-9布尔类型
    我们已经了解了Python支持布尔类型的数据，布尔类型只有True和False两种值，但是布尔类型有以下几种运算：

		与运算：只有两个布尔值都为 True 时，计算结果才为 True。
		True and True   # ==> True
		True and False   # ==> False
		False and True   # ==> False
		False and False   # ==> False
		
		或运算：只要有一个布尔值为 True，计算结果就是 True。
		True or True   # ==> True
		True or False   # ==> True
		False or True   # ==> True
		False or False   # ==> False
		
		非运算：把True变为False，或者把False变为True：
		not True   # ==> False
		not False   # ==> True
	布尔运算在计算机中用来做条件判断，根据计算结果为True或者False，计算机可以自动执行不同的后续代码。
	在Python中，布尔类型还可以与其他数据类型做 and、or和not运算，请看下面的代码：
	a = True
	print a and 'a=T' or 'a=F'
	计算结果不是布尔类型，而是字符串 'a=T'，这是为什么呢？
	因为Python把0、空字符串''和None看成 False，其他数值和非空字符串都看成 True，所以：
	True and 'a=T' 计算结果是 'a=T'
	继续计算 'a=T' or 'a=F' 计算结果还是 'a=T'
	要解释上述结果，又涉及到 and 和 or 运算的一条重要法则：短路计算。
	1. 在计算 a and b 时，如果 a 是 False，则根据与运算法则，整个结果必定为 False，因此返回 a；如果 a 是 True，则整个计算结果必定取
	   决与 b，因此返回 b。
	2. 在计算 a or b 时，如果 a 是 True，则根据或运算法则，整个计算结果必定为 True，因此返回 a；如果 a 是 False，则整个计算结果必定
	   取决于 b，因此返回 b。
	所以Python解释器在做布尔运算时，只要能提前确定计算结果，它就不会往后算了，直接返回结果。
第四章：List和Tuple类型
    List操作
	    4-1创建     直接使用[]来创建，可以将list赋值给一个变量。同时由于python是动态语言，所以一个List中的元素不需要是同一种类型。
		            同时，一个list创建后还可以进行修改，但是tuple一旦创建就不能修改。 
		4-2索引访问 使用list_name.[index]来访问对应索引位置的list元素 索引编号从0开始
		4-3倒序访问 使用list_name.[index]来访问对应索引位置的list元素 索引编号从-1开始
		4-4添加     使用list_name.append(new_element)自动将新的元素添加到list的末尾，使用list_name.insert(index, new_element)将元
		            素添加到相应的索引处
		4-5删除     使用list_name.pop()自动将list末尾的元素删除并返回，使用list_name.pop(index)自动将list对应索引的元素删除并返回
		4-6替换     直接使用list_name[index]=new_element来覆盖相应索引的元素
	Tuple操作
	    4-7创建tuple        与创建list相同只是将[] 换成了() ，其他的地方是相同的。都可以使用索引，但是tuple不能使用.append()，
		                    .insert，.pop() 同样的tuple也不支持替换操作。
		4-8创建单元素tuple  因为()既可以表示tuple，又可以作为括号表示运算时的优先级，结果 (1) 被Python解释器计算出结果 1，导致我
		                    们得到的不是tuple，而是整数 1。正是因为用()定义单元素的tuple有歧义，所以 Python 规定，单元素 tuple 
							要多加一个逗号“,”，这样就避免了歧义。
		4-9可变的tuple      tuple的不变只是指向不变，也就是说当tuple指向了一个list时，只要不改变tuple的指向我们就可以修改list的
		                    内容。
第五章：条件判断和循环
    计算机之所以能做很多自动化的任务，因为它可以自己做条件判断。
比如，输入用户年龄，根据年龄打印不同的内容，在Python程序中，可以用if语句实现：
age = 20
if age >= 18:
    print 'your age is', age
    print 'adult'
print 'END'
注意: Python代码的缩进规则。具有相同缩进的代码被视为代码块，上面的3，4行 print 语句就构成一个代码块（但不包括第5行的print）。如果
if 语句判断为 True，就会执行这个代码块。
    缩进请严格按照Python的习惯写法：4个空格，不要使用Tab，更不要混合Tab和空格，否则很容易造成因为缩进引起的语法错误。
注意: if 语句后接表达式，然后用:表示代码块开始。
如果你在Python交互环境下敲代码，还要特别留意缩进，并且退出缩进需要多敲一行回车：
>>> age = 20
>>> if age >= 18:
...     print 'your age is', age
...     print 'adult'
...
your age is 20
adult

在Python中我们使用的条件语句主要包括：
（1）if...:
        ........
（2）if...:
        ........
        else:
		    ........
（3）if...:
        ........
	elif:
		........ 
	......
	......
	......
	else:
	    .........

在Python中我们使用的循环语句主要包括： 
（1）for...in...:
         ...........
（2）while...:
         ...........
（3）跳出循环：break
    for....in....:
	    ..............
		if .......:
		    break
	或
    while......:
	    ..............
		if ......:
		    break
（4）跳过循环：continue
    for ...in....:
	    .............
		if .....:
		    continue
		.............
	或
    while ........:
	    ..............
		if......:
		    continue
		..............
注意：对于字符串来说“+”就是将两个字符串连接起来的意思。

第六章：Dict和Set类型
注意： (变量名)可以查看任何集合的大小，如list tuple dict set
Dict的创建格式：
     变量名 = {                                d = {
              key:value,                             'Adam':95,
     		  key:value,                             'Lisa':85,
     		  key:value,                如：         'Bart':59
     		  key:value,                       }
    		  ....
     }
     Dict就是通过key来寻找到value的一种数据存储格式。
访问dict:
（1）通过in来判断key是否存在，再通过key来访问：
     if key in dict_name:
		print dict_name[key]
（2）通过.get(key)函数来访问：
     print dict_name.get(key)
更新dict：
 通过赋值语句：dict_name[key] = value








